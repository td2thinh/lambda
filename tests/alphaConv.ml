open CoreLib.TermTypes
open CoreLib.LambdaRules
open CoreLib.LambdaUtils

(* Testing alpha conversion *)
(* Test  cases generated by Claude AI*)
(* Expected Result below *)
(*
((λx.x) y) -> ((λX1.X1) y)
(λx.(λx.x)) -> (λX2.(λX3.X3))
(λx.(λy.(x (y x)))) -> (λX4.(λX5.(X4 (X5 X4))))
(λx.((λy.((λx.(x y)) x)) x)) -> (λX6.((λX7.((λX8.(X8 X7)) X6)) X6))
((λx.(x (λy.(x y)))) (λz.z)) -> ((λX10.(X10 (λX11.(X10 X11)))) (λX9.X9))
(λx.((λy.((λx.(x (y x))) x)) (λx.x))) -> (λX12.((λX14.((λX15.(X15 (X14 X15))) X12)) (λX13.X13)))
*)
(* Basic test cases *)
let test1 = App (Abs ("x", Var "x"), Var "y") (* (λx.x)y *)
let test2 = Abs ("x", Abs ("x", Var "x")) (* λx.λx.x - shadowing *)

(* More complex nested abstractions *)
let test3 = Abs ("x", Abs ("y", App (Var "x", App (Var "y", Var "x"))))
(* λx.λy.(x(yx)) *)

(* Multiple variable shadowing *)
let test4 =
  Abs
    ( "x",
      App (Abs ("y", App (Abs ("x", App (Var "x", Var "y")), Var "x")), Var "x")
    )
(* λx.((λy.((λx.(xy))x))x) *)

(* Complex expression with multiple applications *)
let test5 =
  App
    ( Abs ("x", App (Var "x", Abs ("y", App (Var "x", Var "y")))),
      Abs ("z", Var "z") )
(* (λx.(x(λy.(xy))))(λz.z) *)

(* Nested shadowing with multiple applications *)
let test6 =
  Abs
    ( "x",
      App
        ( Abs
            ( "y",
              App (Abs ("x", App (Var "x", App (Var "y", Var "x"))), Var "x") ),
          Abs ("x", Var "x") ) )

let test_alpha_conversion_1 () =
  let result = alpha_conversion test1 in
  let expected = App (Abs ("X1", Var "X1"), Var "y") in
  Alcotest.(check string)
    "alpha_conversion_1" (print_term expected) (print_term result)

let test_alpha_conversion_2 () =
  let result = alpha_conversion test2 in
  let expected = Abs ("X2", Abs ("X3", Var "X3")) in
  Alcotest.(check string)
    "alpha_conversion_2" (print_term expected) (print_term result)

let test_alpha_conversion_3 () =
  let result = alpha_conversion test3 in
  let expected =
    Abs ("X4", Abs ("X5", App (Var "X4", App (Var "X5", Var "X4"))))
  in
  Alcotest.(check string)
    "alpha_conversion_3" (print_term expected) (print_term result)

let test_alpha_conversion_4 () =
  let result = alpha_conversion test4 in
  let expected =
    Abs
      ( "X6",
        App
          ( Abs ("X7", App (Abs ("X8", App (Var "X8", Var "X7")), Var "X6")),
            Var "X6" ) )
  in
  Alcotest.(check string)
    "alpha_conversion_4" (print_term expected) (print_term result)

let test_alpha_conversion_5 () =
  let result = alpha_conversion test5 in
  let expected =
    App
      ( Abs ("X10", App (Var "X10", Abs ("X11", App (Var "X10", Var "X11")))),
        Abs ("X9", Var "X9") )
  in
  Alcotest.(check string)
    "alpha_conversion_5" (print_term expected) (print_term result)

let test_alpha_conversion_6 () =
  let result = alpha_conversion test6 in
  let expected =
    Abs
      ( "X12",
        App
          ( Abs
              ( "X14",
                App
                  ( Abs ("X15", App (Var "X15", App (Var "X14", Var "X15"))),
                    Var "X12" ) ),
            Abs ("X13", Var "X13") ) )
  in
  Alcotest.(check string)
    "alpha_conversion_6" (print_term expected) (print_term result)

(* Run tests *)

let () =
  let open Alcotest in
  run "Lambda"
    [
      ( "AlphaConversion",
        [
          test_case "alpha_conversion_1" `Quick test_alpha_conversion_1;
          test_case "alpha_conversion_2" `Quick test_alpha_conversion_2;
          test_case "alpha_conversion_3" `Quick test_alpha_conversion_3;
          test_case "alpha_conversion_4" `Quick test_alpha_conversion_4;
          test_case "alpha_conversion_5" `Quick test_alpha_conversion_5;
          test_case "alpha_conversion_6" `Quick test_alpha_conversion_6;
        ] );
    ]
