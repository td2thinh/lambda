open CoreLib.TermTypes
open CoreLib.LambdaRules

(* Test cases generated by Claude AI *)
(* Test Case 1: Basic reduction *)
let test_case_1 = App (Abs ("x", Var "x"), Var "y")
(* Expected: Var "y" *)

(* Test Case 2: No reduction inside abstractions *)
let test_case_2 = Abs ("x", App (Abs ("y", Var "y"), Var "x"))
(* Expected: Unchanged, since we don't reduce under lambdas in CBV *)

(* Test Case 3: Nested applications with values *)
let test_case_3 = App (App (Abs ("x", Abs ("y", Var "x")), Var "z"), Var "w")
(* Expected reduction steps:
   1. (λx.λy.x) z w
   2. (λy.z) w
   3. z
*)

(* Test Case 4: Multiple reductions needed *)
let test_case_4 =
  App (App (Abs ("x", App (Var "x", Var "x")), Abs ("y", Var "y")), Var "z")
(* Expected reduction steps:
   1. ((λx.(x x)) (λy.y)) z
   2. ((λy.y) (λy.y)) z
   3. (λy.y) z
   4. z
*)

(* Test Case 5: Complex nested terms *)
let test_case_5 =
  App
    ( App
        ( Abs ("x", App (Abs ("y", App (Var "x", Var "y")), Var "x")),
          Abs ("z", Var "z") ),
      Var "w" )
(* Expected reduction steps:
   1. ((λx.(λy.(x y)) x) (λz.z)) w
   2. ((λy.((λz.z) y)) (λz.z)) w
   3. ((λz.z) (λz.z)) w
   4. (λz.z) w
   5. w
*)

(* Test Case 6: Non-reducible term *)
let test_case_6 = App (Var "x", App (Abs ("y", Var "y"), Var "z"))
(* Expected reduction steps:
   1. x ((λy.y) z)
   2. x z
   No further reduction possible since x is a free variable
*)

(* Test Case 7: Testing order of evaluation *)
let test_case_7 =
  App (App (Abs ("x", Var "x"), App (Abs ("y", Var "y"), Var "z")), Var "w")

(* Expected reduction steps:
   1. (λx.x) ((λy.y) z) w
   2. (λx.x) z w
   3. z w
*)
(* Lambda functions from the slides *)
let identity = Abs ("x", Var "x")
let apply = Abs ("x", Abs ("y", App (Var "x", Var "y")))
let k_function = Abs ("x", Abs ("y", Var "x"))

let s_function =
  Abs
    ( "x",
      Abs ("y", Abs ("z", App (App (Var "x", Var "z"), App (Var "y", Var "z"))))
    )

let skk = App (App (s_function, k_function), k_function)
let delta = Abs ("x", App (Var "x", Var "x"))
let omega = App (delta, delta)
let sii = App (App (s_function, identity), identity)
let church_zero = Abs ("f", Abs ("x", Var "x"))
let church_one = Abs ("f", Abs ("x", App (Var "f", Var "x")))
let church_two = Abs ("f", Abs ("x", App (Var "f", App (Var "f", Var "x"))))

let church_three =
  Abs ("f", Abs ("x", App (Var "f", App (Var "f", App (Var "f", Var "x")))))

let church_succ =
  Abs
    ( "n",
      Abs ("f", Abs ("x", App (Var "f", App (App (Var "n", Var "f"), Var "x"))))
    )

let plus = Abs ("m", Abs ("n", App (App (Var "m", church_succ), Var "n")))

let mult =
  Abs ("m", Abs ("n", App (App (Var "m", App (plus, Var "n")), church_zero)))

let church_pred =
  Abs
    ( "n",
      Abs
        ( "f",
          Abs
            ( "x",
              App
                ( App
                    ( App
                        ( Var "n",
                          Abs
                            ( "g",
                              Abs ("h", App (Var "h", App (Var "g", Var "f")))
                            ) ),
                      Abs ("u", Var "x") ),
                  Abs ("u", Var "u") ) ) ) )

let sub = Abs ("m", Abs ("n", App (App (Var "n", church_pred), Var "m")))

let term_test =
  Alcotest.testable CoreLib.LambdaUtils.pp CoreLib.LambdaUtils.equal

let just_result result = match result with Some t -> t | None -> Var "None"

let test_1 () =
  let result = ltr_cbv_norm test_case_1 in
  let expected = Var "y" in
  Alcotest.(check term_test) "test_1" expected (just_result result)

let test_2 () =
  let result = ltr_cbv_norm test_case_2 in
  let expected = identity in
  Alcotest.(check bool)
    "test_2" true
    (CoreLib.LambdaUtils.alpha_equal expected (just_result result))

let test_3 () =
  let result = ltr_cbv_norm test_case_3 in
  let expected = Var "z" in
  Alcotest.(check term_test) "test_3" expected (just_result result)

let test_4 () =
  let result = ltr_cbv_norm test_case_4 in
  let expected = Var "z" in
  Alcotest.(check term_test) "test_4" expected (just_result result)

let test_5 () =
  let result = ltr_cbv_norm test_case_5 in
  let expected = Var "w" in
  Alcotest.(check term_test) "test_5" expected (just_result result)

let test_6 () =
  let result = ltr_cbv_norm test_case_6 in
  let expected = App (Var "x", Var "z") in
  Alcotest.(check term_test) "test_6" expected (just_result result)

let test_7 () =
  let result = ltr_cbv_norm test_case_7 in
  let expected = App (Var "z", Var "w") in
  Alcotest.(check term_test) "test_7" expected (just_result result)

let test_identity () =
  let result = ltr_cbv_norm identity in
  let expected = Abs ("X14", Var "X14") in
  Alcotest.(check term_test) "test_identity" expected (just_result result)

let test_apply () =
  let result = ltr_cbv_norm apply in
  let expected = apply in
  Alcotest.(check bool)
    "test_apply" true
    (CoreLib.LambdaUtils.alpha_equal expected (just_result result))

let test_k () =
  let result = ltr_cbv_norm k_function in
  let expected = k_function in
  Alcotest.(check bool)
    "test_k" true
    (CoreLib.LambdaUtils.alpha_equal expected (just_result result))

let test_s () =
  let result = ltr_cbv_norm s_function in
  let expected = s_function in
  Alcotest.(check bool)
    "test_s" true
    (CoreLib.LambdaUtils.alpha_equal expected (just_result result))

let test_skk () =
  let result = ltr_cbv_norm skk in
  let expected = identity in
  Alcotest.(check bool)
    "test_skk" true
    (CoreLib.LambdaUtils.alpha_equal expected (just_result result))

let test_delta () =
  let result = ltr_cbv_norm delta in
  let expected = delta in
  Alcotest.(check bool)
    "test_delta" true
    (CoreLib.LambdaUtils.alpha_equal expected (just_result result))

(* Omega should give None because its not reducible *)
let test_omega () =
  Alcotest.(check bool) "test_omega" true (ltr_cbv_norm omega = None)

let test_sii () =
  let result = ltr_cbv_norm sii in
  (* Should be λX. x x *)
  let expected = Abs ("x", App (Var "x", Var "x")) in
  Alcotest.(check bool)
    "test_sii" true
    (CoreLib.LambdaUtils.alpha_equal expected (just_result result))

let () =
  let open Alcotest in
  run "Lambda"
    [
      ( "Left to Right Call-by-Value reduction strategy",
        [
          test_case "test_1" `Quick test_1;
          test_case "test_2" `Quick test_2;
          test_case "test_3" `Quick test_3;
          test_case "test_4" `Quick test_4;
          test_case "test_5" `Quick test_5;
          test_case "test_6" `Quick test_6;
          test_case "test_7" `Quick test_7;
          test_case "test_identity" `Quick test_identity;
          test_case "test_apply" `Quick test_apply;
          test_case "test_k" `Quick test_k;
          test_case "test_s" `Quick test_s;
          test_case "test_skk" `Quick test_skk;
          test_case "test_delta" `Quick test_delta;
          test_case "test_omega" `Quick test_omega;
          test_case "test_sii" `Quick test_sii;
        ] );
    ]
